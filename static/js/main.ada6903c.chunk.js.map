{"version":3,"sources":["components/Header.js","components/Footer.js","pages/Home.js","pages/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","createElement","className","Footer","Home","_ref","username","setUsername","room","setRoom","socket","rooms","createRoom","newRoom","setNewRoom","useState","usernameError","setUsernameError","searchTerm","setSearchTerm","filteredRooms","filter","r","toLowerCase","includes","Fragment","onSubmit","e","preventDefault","htmlFor","id","type","placeholder","value","onChange","target","length","map","key","onClick","handleCreateRoom","trim","alert","joinRoom","emit","async","newUsername","isDuplicate","counter","checkUsername","Promise","resolve","name","window","location","href","Chat","messages","setMessages","messageInput","setMessageInput","messagesEndRef","useRef","handleReceiveMessage","data","prev","handleLastMessages","lastMessages","useEffect","on","off","current","scrollIntoView","behavior","sendMessage","trimmedMessage","message","msg","i","rawDate","Date","toLocaleString","formatDate","created_at","__createdtime__","ref","onKeyPress","io","connect","App","setRooms","response","success","prevRooms","Router","Switch","Route","exact","path","render","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.ada6903c.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles.css';\r\n\r\nconst Header = () => (\r\n  <header className=\"main-header\">\r\n    <h1 className=\"title\">FreeRooms</h1>\r\n    <p className=\"subtitle\">Все двери открыты</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../styles.css';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\"></footer>\r\n);\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst Home = ({ username, setUsername, room, setRoom, socket, rooms, createRoom }) => {\r\n  const [newRoom, setNewRoom] = useState('');\r\n  const [usernameError, setUsernameError] = useState('');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const joinRoom = () => {\r\n    if (username.length > 20) {\r\n      setUsernameError('Имя не должно превышать 20 символов');\r\n      return;\r\n    }\r\n    if (room !== '' && username !== '') {\r\n      socket.emit('check_username', { username, room }, async (isDuplicate) => {\r\n        let newUsername = username;\r\n        if (isDuplicate) {\r\n          let counter = 1;\r\n          const checkUsername = async (name) => {\r\n            return new Promise((resolve) => {\r\n              socket.emit('check_username', { username: name, room }, resolve);\r\n            });\r\n          };\r\n          \r\n          while (isDuplicate) {\r\n            newUsername = `${username}#${counter}`;\r\n            isDuplicate = await checkUsername(newUsername);\r\n            counter++;\r\n          }\r\n        }\r\n        setUsername(newUsername);\r\n        socket.emit('join_room', { username: newUsername, room });\r\n        window.location.href = '/chat'; // Изменено вместо useNavigate\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCreateRoom = () => {\r\n    if (newRoom.trim() === '') {\r\n      alert('Название комнаты не может быть пустым');\r\n      return;\r\n    }\r\n    createRoom(newRoom);\r\n    setNewRoom('');\r\n  };\r\n\r\n  const filteredRooms = rooms.filter(r =>\r\n    r.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"side-panel left\"></div>\r\n      <Header />\r\n      <div className=\"side-panel right\"></div>\r\n      \r\n      <main className=\"main-content\">\r\n        <div className=\"container\">\r\n          <form onSubmit={(e) => e.preventDefault()} className=\"form-box\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Nickname:</label>\r\n              <input\r\n                id=\"username\"\r\n                type=\"text\"\r\n                placeholder=\"Введите имя...\"\r\n                value={username}\r\n                onChange={(e) => {\r\n                  if (e.target.value.length <= 20) {\r\n                    setUsernameError('');\r\n                    setUsername(e.target.value);\r\n                  } else {\r\n                    setUsernameError('Имя не должно превышать 20 символов');\r\n                  }\r\n                }}\r\n                className={usernameError ? 'error-input' : ''}\r\n              />\r\n              {usernameError && <p className=\"error\">{usernameError}</p>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"room\">Выбор комнаты:</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Поиск комнаты...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n              />\r\n              <select\r\n                id=\"room\"\r\n                value={room}\r\n                onChange={(e) => setRoom(e.target.value)}\r\n              >\r\n                <option value=\"\">-Список комнат-</option>\r\n                {filteredRooms.map((r) => (\r\n                  <option key={r} value={r}>{r}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"create-room\">\r\n              <label>Создать новую комнату</label>\r\n              <div className=\"create-room-row\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Название комнаты\"\r\n                  value={newRoom}\r\n                  onChange={(e) => setNewRoom(e.target.value)}\r\n                />\r\n                <button type=\"button\" onClick={handleCreateRoom}>\r\n                  Создать\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <button className=\"start-btn\" type=\"button\" onClick={joinRoom}>\r\n              Начать общение\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </main>\r\n      \r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst Chat = ({ socket, username, room }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [messageInput, setMessageInput] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Обработчик получения сообщений\r\n  const handleReceiveMessage = (data) => {\r\n    setMessages((prev) => [...prev, data]);\r\n  };\r\n\r\n  // Обработчик получения истории сообщений\r\n  const handleLastMessages = (lastMessages) => {\r\n    setMessages(lastMessages);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Подписываемся на события сокета\r\n    socket.on('receive_message', handleReceiveMessage);\r\n    socket.on('last_100_messages', handleLastMessages);\r\n\r\n    // Функция очистки\r\n    return () => {\r\n      socket.off('receive_message', handleReceiveMessage);\r\n      socket.off('last_100_messages', handleLastMessages);\r\n    };\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    // Прокрутка к последнему сообщению\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    const trimmedMessage = messageInput.trim();\r\n    if (trimmedMessage) {\r\n      socket.emit('send_message', {\r\n        username,\r\n        room,\r\n        message: trimmedMessage,\r\n      });\r\n      setMessageInput('');\r\n    }\r\n  };\r\n\r\n  const formatDate = (rawDate) => {\r\n    return new Date(rawDate).toLocaleString('ru-RU');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"side-panel left\"></div>\r\n      <Header />\r\n      <div className=\"side-panel right\"></div>\r\n      \r\n      <main className=\"main-content\">\r\n        <div className=\"chat-container\">\r\n          <h2 className=\"room-title\">{room}</h2>\r\n          <section className=\"messages\">\r\n            {messages.map((msg, i) => (\r\n              <div \r\n                key={i} \r\n                className={`message ${msg.username === username ? 'sent' : 'received'}`}\r\n              >\r\n                <div className=\"message-content\">\r\n                  <span className=\"username\">{msg.username}: </span>\r\n                  <span className=\"text\">{msg.message}</span>\r\n                </div>\r\n                <span className=\"time\">\r\n                  {formatDate(msg.created_at || msg.__createdtime__)}\r\n                </span>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </section>\r\n          <section className=\"input-area\">\r\n            <input\r\n              value={messageInput}\r\n              onChange={(e) => setMessageInput(e.target.value)}\r\n              placeholder=\"Введите сообщение...\"\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n            <button onClick={sendMessage}>Отправить</button>\r\n          </section>\r\n        </div>\r\n      </main>\r\n      \r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;","import React, { useState, useEffect } from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Chat from './pages/Chat';\r\nimport io from 'socket.io-client';\r\nimport './styles.css';\r\n\r\nconst socket = io.connect('http://localhost:4000');\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [rooms, setRooms] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.emit('get_rooms', (rooms) => {\r\n      setRooms(rooms);\r\n    });\r\n  }, []);\r\n\r\n  const createRoom = (newRoom) => {\r\n    socket.emit('create_room', newRoom, (response) => {\r\n      if (response.success) {\r\n        setRooms((prevRooms) => [...prevRooms, newRoom]);\r\n        alert(response.message);\r\n      } else {\r\n        alert(response.message); \r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <Home\r\n                username={username}\r\n                setUsername={setUsername}\r\n                room={room}\r\n                setRoom={setRoom}\r\n                socket={socket}\r\n                rooms={rooms}\r\n                createRoom={createRoom}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/chat\"\r\n            render={() => (\r\n              <Chat username={username} room={room} socket={socket} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}